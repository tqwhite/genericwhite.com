'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'apiManager',
				optional: false
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'mongoose',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================

	let workerList = {};

	//LOCAL FUNCTIONS ====================================

	const postItem = (inData, callback) => {
		var item = new GridSet(inData);
		item.save(callback);
	};

	const putItem = function(id, inData, callback) {
		GridSet.update({
			_id: id
		}, inData, {}, callback);
	}

	const startSystem = () => {

		if (typeof (COMPONENT) == 'undefined') {
			console.log("COMPONENT is undefined in" + __dirname)
			this.initCallback && this.initCallback();
			return;
		}

		const startList = [];


		var COMPONENT = require('COMPONENT');
		startList.push((done) => {
			const workerName = 'COMPONENT_NAME'
			new COMPONENT({
				config: this.config,
				apiManager: this.apiManager.init(workerName),
				router: this.router,
				permissionMaster: this.permissionMaster,
				initCallback: function() {
					workerList[workerName] = this; done();
				}
			});
		});

		async.series(startList, () => {
			this.initCallback && this.initCallback();
		});
	};

	const getGrid = (inData, callback) => {
		
		GridSet.findOne({
			userRefId:'tqwhiteUserRefId'
		}, (err, result)=>{
			if (err){
				callback(err);
				return;
			}
			if (!result){
				callback(`No grid found for $(inData.userRefId}`);
				return;
			}
			callback('', result);
		});
	}

	//METHODS AND PROPERTIES ====================================

	if (typeof (workerList) != 'object' || 'this object DOES NOT WANT to SHUT DOWN WORKERS') {
		this.shutdown = (message, callback) => {
			console.log(`
shutting down ${__dirname}`);
			callback('', message);
		}
	} else {
		const buildShutdownList = (message) => {
			const shutdownList = [];
			for (var i in workerList) {
				var worker = workerList[i];
				shutdownList.push(
					((i) => {
						return (done) => {
							workerList[i].shutdown(message, done)
						}
					})(i)
				);
			}
			return shutdownList;
		};

		const cleanup = () => {
			let nameString = '';
			for (var i in workerList) {
				workerList[i] = null;
				nameString += `${i}, `;
			}
			qtools.message(`[${nameString.replace(/, $/, '')}] were flushed at ${Date.now()}`);
			workerList = {};
		}

		this.shutdown = (message, callback) => {
			async.parallel(buildShutdownList(message), () => {
				cleanup();
				callback('', message);
			});
		}
	}

	//API ENDPOINTS ====================================

	let route;
	let method;
	
	
		route = new RegExp(/api\/bookmarks/);
		method='get';
		this.permissionMaster.addRoute(method, route, 'all');
		this.router[method](route, (req, res, next)=>{
		getGrid(req.body, (err, result) => {
			if (err) {
				next({
					code: '500',
					errorText: err
				});
			} else {
				res.json({
					token: this.permissionMaster.getToken(result.role, {
							userRefId:result.userRefId,
							_id:result._id
						}),
					data: [result]
				});
			}
		});

	})	
	
		route = new RegExp(/api\/bookmarks\/(.*)$/);
		method='put';
		this.permissionMaster.addRoute(method, route, 'all');
		this.router[method](route, (req, res, next)=>{
		getGrid(req.body, (err, result) => {
putItem(req.params[0], req.body, (err, result)=>{

			if (err) {
				next({
					code: '500',
					errorText: err
				});
			} else {
				res.json({
					token: this.permissionMaster.getToken(result.role, {
							userRefId:result.userRefId,
							_id:result._id
						}),
					data: [result]
				});
			}
			});
		});

	})
	

	//INITIALIZATION ====================================


	const mongooseSchema = this.mongoose.Schema({
		refId: {
			type: String,
			unique: true
		},
		userRefId: String,
		defaultGridRefId: String,
		archiveGridRefId: String,
		grids: [{
			refId: String,
			name: String,
			columnWidth: Number,
			bookmarks: [
				{
					position: {
						row: Number,
						column: Number
					},
					anchor: {
						uri: String,
						text: String
					},
					cssClasses: String
				}
			]
		}]
	});

	mongooseSchema.methods.toJSON = function() {
		const obj = this.toObject()
		delete obj.pwhash
		return obj
	//thanks Charles
	//http://stackoverflow.com/questions/11160955/how-to-exclude-some-fields-from-the-document
	}


	const GridSet = this.mongoose.model('GridSet', mongooseSchema);

	startSystem();
	

	//DATA STARTUP (TEMPORARY) ====================================
	const initialData = require('./initialData.json')
	const defaultGrid = {
		refId: 'tqDefaultRefId',
		name: 'TQ Main',
		columnWidth: 3,
		bookmarks: initialData
	}

	const archiveGrid = {
		refId: 'tqArchiveRefId',
		name: 'Archive',
		columnWidth: 3,
		bookmarks: [
			{
				"refId": "1012",     "anchor": {      "uri": "---",      "text": "3-3"     },     "position": {      "row": "3",      "column": "3"     },     "cssClasses": ""
			},
			{
    			"refId": "1013",     "anchor": {      "uri": "http://news.google.com/nwshp?hl=en&gl=us",      "text": "4-1"     },     "position": {      "row": "4",      "column": "1"     },     "cssClasses": ""
			},
		]
	}


	const startupData = {
		refId: 'startupDataRefId',
		userRefId: 'tqwhiteUserRefId',
		defaultGridRefId: 'tqDefaultRefId',
		archiveGridRefId: 'tqArchiveRefId',
		grids: [
			defaultGrid,
			archiveGrid
		]
	}



	postItem(startupData, (err, result) => {
		if (err && err.message.match(/duplicate key/)) {
			console.log('tq grids already exist');
		} else if (err) {
			console.dir({
				"err": err
			});
		} else {
			console.log('tq grids created');
		}
	});
	//END DATA STARTUP (TEMPORARY) ====================================


	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

