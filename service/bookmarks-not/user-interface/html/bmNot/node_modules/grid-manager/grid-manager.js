"use strict";

//START OF moduleFunction() ============================================================

export default function(gridElement, tools) {
	const { Map, stache, qtools, viewModel, incomingParameters } = tools;
	
	//LOCAL VARIABLES ====================================

console.dir({"gridElement":gridElement});


	const bookmarksArray = qtools.convertNumericObjectToArray(
		gridElement.bookmarks
	);
	let workingTable;
	
	let alreadyAddedIncomingParameter = false;
	
	//LOCAL FUNCTIONS ====================================

	const getDimension = direction => {
		return bookmarksArray.reduce(
			(prevMax, item, inx, all) => {
				return Math.max(prevMax, item.position[direction]);
			},
			0
		);
	};

	const startTable = (id, tableClassString) => {
		return $(`<table id='table_${id}' class='${tableClassString}'></table>`);
	};

	const addRows = (tableObj, count, columns, msg) => {
		let newRow;
		const origCount = tableObj.find("tr").length;
		for (let i = origCount; i < count + origCount; i++) {
			newRow = $(`<tr><td>&nbsp;</td></tr>`);
			const row = tableObj.append(newRow);
			for (let j = 0; j < columns; j++) {
				newRow.append($(`<td></td>`));
			}
		}
	};

	const cellByCoord = (rowNumber, col) => {
		window.workingTable = workingTable;
		const row = workingTable.find(`tr:nth-of-type(${rowNumber})`);
		const cell = row.find(`td:nth-of-type(${col})`);
		return cell;
	};
	
	const addToDom = (bookmark, editMode) => {
		const cell = cellByCoord(bookmark.position.row, bookmark.position.column);

		if (editMode) {
			const htmlOrig = `
				<input type='text' name='uri' value='{{anchor.uri}}'>
				<input type='text' name='text' value='{{anchor.text}}'>
				<input type='hidden' name='position' value='${bookmark.position.row},${bookmark.position.column}'>
			`;
			const renderer = stache(htmlOrig);
			const testMap = new Map(bookmark);
			const fragment = renderer(testMap);
			cell.html(fragment);
		} else {
			cell.html(`<a href='${bookmark.anchor.uri}'>${bookmark.anchor.text}</a>`);
		}
	};
	
	const findMapItem = editPosition => {
		let item;
		let position;
		for (var i = 0, len = bookmarksArray.length; i < len; i++) {
			item = bookmarksArray[i];
			position = item.attr("position");
			if (
				editPosition[0] == position.attr("row") &&
				editPosition[1] == position.attr("column")
			) {
				return item;
			}
		}
	};
	
	//METHODS AND PROPERTIES ====================================
	
	this.applyEdit = domObj => {
		const parent = $(domObj).parent();

		const position = parent.find('input[name="position"]').val().split(",");

		const text = parent.find('input[name="text"]').val();

		const uri = parent.find('input[name="uri"]').val();
		const cell = cellByCoord(position[0], position[1]);

		const changedMapItem = findMapItem(position);

		const anchor = changedMapItem.attr("anchor");
		anchor.attr("text", text);
		anchor.attr("uri", uri);
	};

	this.renderGrid = (tableClassString, editMode) => {
		workingTable = startTable(gridElement.refId, tableClassString);
		addRows(workingTable, getDimension("row"), gridElement.columnWidth);
		bookmarksArray.map((bookmark, inx) => {
			addToDom(bookmark, editMode);
		});

		if (
			incomingParameters.disposition == "add" &&
			incomingParameters.uri &&
			incomingParameters.text &&
			incomingParameters.targetGrid == gridElement.refId &&
			!alreadyAddedIncomingParameter
		) {
			const row = workingTable.find(`tr:nth-of-type(${getDimension("row")})`);
			let firstEmptyInx;

			row.find("td").each((inx, item) => {
				if (!item.innerHTML) {
					if (typeof firstEmptyInx == "undefined") {
						firstEmptyInx = inx + 1; //not sure why this needs +1
					} else {
						firstEmptyInx = Math.min(firstEmptyInx, inx);
					}
				}
			});

			const newPosition = {
				row: getDimension("row"),
				column: firstEmptyInx
			};
			const anchor = {
				text: incomingParameters.text,
				uri: incomingParameters.uri
			};
			const newMark = {
				position: newPosition,
				anchor: anchor
			};

			bookmarksArray.push(newMark);

			addToDom(newMark, editMode);

			alreadyAddedIncomingParameter = true;
			
			/*

this creates and displays the new bookmark. it does not save it.

*/
		}

		return workingTable;
	};

	//INITIALIZATION ====================================

	return this;
}
