'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'apiManager',
				optional: false
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'mongoose',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================

	let workerList = {};

	//STARTUP FUNCTIONS ====================================

	const startSystem = () => {

		if (typeof (COMPONENT) == 'undefined') {
			//console.log("COMPONENT is undefined in" + __dirname)
			this.initCallback && this.initCallback();
			return;
		}

		const startList = [];

		startList.push((done) => {
			const workerName = 'COMPONENT_NAME'
			new COMPONENT({
				config: this.config,
				apiManager: this.apiManager.init(workerName),
				router: this.router,
				permissionMaster: this.permissionMaster,
				initCallback: function() {
					workerList[workerName] = this; done();
				}
			});
		});

		async.series(startList, () => {
			this.initCallback && this.initCallback();
		});
	};

	//SHUTDOWN METHODS ====================================

	if (typeof (workerList) != 'object') {
		this.shutdown = (message, callback) => {
			console.log(`\nshutting down ${__dirname}`);
			callback('', message);
		}
	} else {
		const buildShutdownList = (message) => {
			const shutdownList = [];
			for (var i in workerList) {
				var worker = workerList[i];
				shutdownList.push(
					((i) => {
						return (done) => {
							workerList[i].shutdown(message, done)
						}
					})(i)
				);
			}
			return shutdownList;
		};

		const cleanup = () => {
			let nameString = '';
			for (var i in workerList) {
				workerList[i] = null;
				nameString += `${i}, `;
			}
			qtools.message(`[${nameString.replace(/, $/, '')}] were flushed at ${Date.now()}`);
			workerList = {};
		}

		this.shutdown = (message, callback) => {
			async.parallel(buildShutdownList(message), () => {
				cleanup();
				callback('', message);
			});
		}
	}

	//API/ROUTE ENDPOINTS ====================================

	let route;
	let method;
	
	
		route = new RegExp(/api\/user/);
		method='post';
		this.permissionMaster.addRoute(method, route, 'all');
		this.router[method](route, (req, res, next)=>{
	
		if (req.body.username){
			req.body.username=req.body.username.toLowerCase();
		}
		
		getUser(req.body, (err, result) => {
			if (err) {
				next({
					code: '500',
					errorText: err
				});
			} else {
				res.json({
					token: this.permissionMaster.getToken(result.role, {
							userRefId:result.refId,
							username:result.username,
							_id:result._id
						}),
					data: result
				});
			}
		});

	})
	


	//LOCAL FUNCTIONS ====================================

	const getUser = (inData, callback) => {
		if (inData.password) {
			inData.pwhash = qtools.passwordHash(inData.password);
		}
		if (inData.username) {
			inData.username = inData.username.toLowerCase();
		}
		
		User.findOne({
			username:inData.username,
			pwhash:inData.pwhash
		}, (err, result)=>{
			if (err){
				callback(err);
				return;
			}
			if (!result){
				callback('User Name and Password do not produce a result');
				return;
			}
			callback('', result);
		});
	}


	const postItem = (inData, callback) => {
		if (inData.password) {
			inData.pwhash = qtools.passwordHash(inData.password);
		}
		if (inData.username) {
			inData.username = inData.username.toLowerCase();
		}
		var item = new User(inData);
		item.save(callback);
	}
	//INITIALIZATION ====================================
	
		const userSchema = this.mongoose.Schema({
		refId: String,
		first: String,
		last: String,
		username: {
			type: String,
			unique: true
		},
		pwhash: String,
		role: String,
		emailAddress: String,
		isActive: Boolean,
		emailConfirmationDate: Date,
		lastLogin: Date
		});

	userSchema.methods.toJSON = function() {
		const obj = this.toObject()
		delete obj.pwhash
		return obj
	//thanks Charles
	//http://stackoverflow.com/questions/11160955/how-to-exclude-some-fields-from-the-document
	}

	const User = this.mongoose.model('User', userSchema);

const tq={
first:'TQ',
last:'White II',
role:'tq',
username:'tqwhite',
refId:'tqwhiteUserRefId',
pwhash:qtools.passwordHash('shairWord!0')
}

postItem(tq, (err, result)=>{
if (err && err.message.match(/duplicate key/)){
	console.log('tq user already exists');
}
else if (err){
console.dir({"err":err});
}
else {
	console.log('tq user created');
}
});

	startSystem();

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

