{"can-util":{"src":{"path":"doc/can-util.md"},"body":"\n","description":"\nA set of utilities.\n","name":"can-util","type":"page"},"can-util/dom":{"name":"can-util/dom","type":"module","parent":"dom/dom.js","src":{"line":0,"codeLine":5,"path":"dom/dom.js"},"body":"","description":"A collection of modules that operate on DOM. \n","title":"can-util/dom","types":[{"type":"Object","options":[]}]},"can-util/js":{"name":"can-util/js","type":"module","parent":"js/js.js","src":{"line":0,"codeLine":5,"path":"js/js.js"},"body":"","description":"Utilities for manipulating JavaScript data structures. \n","title":"can-util/js","types":[{"type":"Object","options":[]}]},"can.view.attr.map":{"name":"can.view.attr.map","type":"property","parent":"can.view.elements","src":{"line":23,"codeLine":44,"path":"dom/attr/attr.js"},"body":"\nA mapping of\nspecial attributes to their JS property. For example:\n\n    \"class\" : \"className\"\n\nmeans get or set `element.className`. And:\n\n     \"checked\" : true\n\nmeans set `element.checked = true`.\n\n\nIf the attribute name is not found, it's assumed to use\n`element.getAttribute` and `element.setAttribute`.\n\t \n","description":"\n","types":[{"type":"Object","template":[{"types":[{"type":"String"}]},{"types":[{"type":"String"},{"type":"Boolean"},{"type":"function","returns":{"types":[{"type":"undefined"}]},"params":[]}]}]}],"title":"","hide":true},"can-util/dom/child-nodes":{"type":"function","name":"can-util/dom/child-nodes","parent":"can-util/dom","src":{"line":0,"codeLine":8,"path":"dom/child-nodes/child-nodes.js"},"body":"","description":"Get all of the childNodes of a given node. ","title":"childNodes","signatures":[{"code":"childNodes(node)","description":"","params":[{"types":[{"type":"Object","options":[]}],"name":"node","description":"The Node that you want child nodes for.\n"}]}],"_curParam":{"types":[{"type":"Object","options":[]}],"name":"node","description":"The Node that you want child nodes for.\n"}},"can-util/dom/data":{"name":"can-util/dom/data","type":"module","parent":"dom/data/data.js","src":{"line":13,"codeLine":22,"path":"dom/data/data.js"},"body":"","description":"Allows associating data as a key/value pair for a particular DOM Node.\n\n```\nvar domData = require(\"can-util/dom/data/data\");\n```\n\n","title":"domData","types":[{"type":"Object","options":[]}]},"can-util/dom/data.get":{"type":"function","name":"can-util/dom/data.get","parent":"can-util/dom/data","src":{"line":37,"codeLine":49,"path":"dom/data/data.js"},"body":"","description":"","title":"domData.get","signatures":[{"code":"domData.get.call(el, key)","description":"\n\nGet data that was stored in a DOM Node using the specified `key`.\n\n```js\nvar metadata = domData.get.call(el, \"metadata\");\n```\n","params":[{"types":[{"type":"String"}],"name":"key","description":"A string used as a unique key for storing data associated with this DOM Node.\n "}]}],"_curParam":{"types":[{"type":"String"}],"name":"key","description":"A string used as a unique key for storing data associated with this DOM Node.\n "}},"can-util/dom/data.set":{"name":"can-util/dom/data.set","type":"function","parent":"can-util/dom/data","src":{"line":54,"codeLine":66,"path":"dom/data/data.js"},"body":"","description":"","title":"domData.set","signatures":[{"code":"domData.set.call(el, key, value)","description":"\n\nSet data to be associated with a DOM Node using the specified `key`. If data already exists for this key, it will be overwritten.\n\n```js\ndomData.set.call(el, \"metadata\", {\n  foo: \"bar\"\n});\n```\n ","params":[]}]},"can-util/dom/dispatch":{"type":"function","name":"can-util/dom/dispatch","parent":"can-util/dom","src":{"line":3,"codeLine":13,"path":"dom/dispatch/dispatch.js"},"body":"","description":"Dispatch an event on an element. ","title":"dispatch","signatures":[{"code":"dispatch.call(el, event, args, bubbles)","description":"","params":[{"types":[{"type":"Object"},{"type":"String"}],"name":"event","description":"An object specifies options applied to this event."},{"types":[{"type":"Array","options":[]}],"optional":true,"name":"args","description":"Arguments passed into this event."},{"types":[{"type":"Boolean"}],"optional":true,"name":"bubbles","defaultValue":"true","description":"Specifies whether this event should bubble (by default it will).\n"}]}],"_curParam":{"types":[{"type":"Boolean"}],"optional":true,"name":"bubbles","defaultValue":"true","description":"Specifies whether this event should bubble (by default it will).\n"}},"can-util/js/assign":{"type":"function","name":"can-util/js/assign","parent":"js/assign/assign.js","src":{"line":0,"codeLine":26,"path":"js/assign/assign.js"},"body":"","description":"Assign properties to an object. \n","title":"assign","signatures":[{"code":"assign(target, source)","description":"\n\nA simplified version of [Object.assign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign), which only accepts a single source argument.\n\n```js\nvar assign = require(\"can-util/js/assign/assign\");\n\nvar obj = {};\n\nassign(obj, {\n  foo: \"bar\"\n});\n\nconsole.log(obj.foo); // -> \"bar\"\n```\n","params":[{"types":[{"type":"Object","options":[]}],"name":"target","description":"The destination object. This object's properties will be mutated based on the object provided as `source`."},{"types":[{"type":"Object","options":[]}],"name":"source","description":"The source object whose own properties will be applied to `target`.\n"}],"returns":{"types":[{"type":"Object","options":[]}],"description":"Returns the `target` argument.\n"}}],"_curParam":{"types":[{"type":"Object","options":[]}],"name":"source","description":"The source object whose own properties will be applied to `target`.\n"},"_curReturn":{"types":[{"type":"Object","options":[]}],"description":"Returns the `target` argument.\n"}},"can-util/js/deep-assign":{"src":{"path":"js/deep-assign/deep-assign.md"},"body":"","description":"Assign properties from a source object to a target object, deeply copying properties that are objects or arrays. ","title":"deepAssign","name":"can-util/js/deep-assign","type":"function","signatures":[{"code":"deepAssign(target, [ ... sources ])","description":"\n\nDeeply assign properties to an object.\n\n```js\nvar deepAssign = require(\"can-util/js/deep-assign/deep-assign\");\n\nvar dest = deepAssign({}, {\n  obj: {\n\t\tfoo: \"bar\"\n\t}\n}, {\n  arr: [{ hello: \"world\" }]\n});\n\nconsole.log(dest.obj.foo); // -> \"bar\"\n```\n","params":[{"types":[{"type":"Object","options":[]}],"name":"target","description":"The target object who's properties will be assigned from the source objects."},{"variable":true,"types":[{"type":"Object","options":[]}],"name":"source","description":"Source objects from which properties will be assigned to the `target` object. Sources will be copied deeply; meaning any object or array properties will be traversed and copied (like a clone).\n"}]}],"_curParam":{"variable":true,"types":[{"type":"Object","options":[]}],"name":"source","description":"Source objects from which properties will be assigned to the `target` object. Sources will be copied deeply; meaning any object or array properties will be traversed and copied (like a clone).\n"}},"warn":{"type":"function","name":"warn","params":[{"types":[{"type":"String"}],"name":"out","description":"the message\n "}],"parent":"js/dev/dev.js","src":{"line":4,"codeLine":11,"path":"js/dev/dev.js"},"body":"","description":"Adds a warning message to the console.\n```\ncan.dev.warn(\"something evil\");\n```\n","_curParam":{"types":[{"type":"String"}],"name":"out","description":"the message\n "}},"log":{"type":"function","name":"log","params":[{"types":[{"type":"String"}],"name":"out","description":"the message\n "}],"parent":"js/dev/dev.js","src":{"line":24,"codeLine":31,"path":"js/dev/dev.js"},"body":"","description":"Adds a message to the console.\n```\ncan.dev.log(\"hi\");\n```\n","_curParam":{"types":[{"type":"String"}],"name":"out","description":"the message\n "}},"can-util/js/each":{"src":{"path":"js/each/each.md"},"body":"","description":"An each ","title":"each","name":"can-util/js/each","type":"function","signatures":[{"code":"each(elements, callback, context)","description":"","params":[{"types":[{"type":"Object"},{"type":"ArrayLike"}],"name":"elements","description":""},{"types":[{"type":"function","returns":{"types":[{"type":"undefined"}]},"params":[{"types":[{"type":"element"}]},{"types":[{"type":"key"}]},{"types":[{"type":"elements"}]}]}],"name":"callback","description":""},{"types":[{"type":"Object","options":[]}],"optional":true,"name":"context","description":"the context object\n"}]}],"_curParam":{"types":[{"type":"Object","options":[]}],"optional":true,"name":"context","description":"the context object\n"}},"can-util/js/global":{"body":"","description":"Get the global object for the JavaScript environment. ","title":"GLOBAL","name":"can-util/js/global","type":"function","signatures":[{"code":"GLOBAL()","description":"\n\nReturns the global that this environment provides. It will be one of:\n\n* **Browser**: `window`\n* **Web Worker**: `self`\n* **Node.js**: `global`\n\n```js\nvar GLOBAL = require(\"can-util/js/global/global\");\n\nvar g = GLOBAL();\n\n// In a browser\nconsole.log(g === window); // -> true\n```\n","params":[],"returns":{"types":[{"type":"Object","options":[]}],"description":"The global object for this JavaScript environment.\n"}}],"_curReturn":{"types":[{"type":"Object","options":[]}],"description":"The global object for this JavaScript environment.\n"}},"can-util/js/import":{"type":"function","name":"can-util/js/import","parent":"js/import/import.js","src":{"line":3,"codeLine":21,"path":"js/import/import.js"},"body":"","description":"Dynamically import a module. ","title":"import","signatures":[{"code":"importModule(moduleName, parentName)","description":"\n\n```js\nvar importModule = require(\"can-util/js/import/import\");\n\nimportModule(\"foo.stache\").then(function(){\n  // module was imported\n});\n```\n","params":[{"types":[{"type":"String"}],"name":"moduleName","description":"The module to be imported."},{"types":[{"type":"String"}],"optional":true,"name":"parentName","description":"A parent module that will be used as a reference for resolving relative module imports."}],"returns":{"types":[{"type":"Promise"}],"description":"A Promise that will resolve when the module has been imported.\n"}}],"_curParam":{"types":[{"type":"String"}],"optional":true,"name":"parentName","description":"A parent module that will be used as a reference for resolving relative module imports."},"_curReturn":{"types":[{"type":"Promise"}],"description":"A Promise that will resolve when the module has been imported.\n"}},"can-util/js/is-array-like":{"src":{"path":"js/is-array-like/is-array-like.md"},"body":"","description":"Determines if an object is array like. ","title":"isArrayLike","name":"can-util/js/is-array-like","type":"function","signatures":[{"code":"isArrayLike(obj)","description":"\n\nDetermines if an object is \"array like\", meaning it can be looped over. Any object with a `.length` property is array like.\n\n```js\nvar isArrayLike = require(\"can-util/js/is-array-like/is-array-like\");\n\n// Arrays\nconsole.log(isArrayLike([{ foo: \"bar\" }])); // -> true\n\n// Strings\nconsole.log(isArrayLike(\"some string\")); // -> true\n\n// Objects with .length property\nconsole.log(isArrayLike({ length: 11 })); // -> true\n\n// Numbers and Booleans are not.\nconsole.log(isArrayLike(true)); // -> false\nconsole.log(isArrayLike(13)); // -> false\n```\n","params":[{"types":[{"type":"*"}],"name":"obj","description":"Any object type."}],"returns":{"types":[{"type":"Boolean"}],"description":"True, if the object is similar to an array.\n"}}],"_curParam":{"types":[{"type":"*"}],"name":"obj","description":"Any object type."},"_curReturn":{"types":[{"type":"Boolean"}],"description":"True, if the object is similar to an array.\n"}},"can-util/js/is-browser-window":{"type":"function","name":"can-util/js/is-browser-window","parent":"js/is-browser-window/is-browser-window.js","src":{"line":0,"codeLine":19,"path":"js/is-browser-window/is-browser-window.js"},"body":"","description":"Determines if code is running within a Browser window (not in a Browser Worker). ","title":"isBrowserWindow","signatures":[{"code":"isBrowserWindow()","description":"\n\nReturns `true` if the code is running within a Browser window. Use this function if you need special code paths for when running in a Browser window, a Web Worker, or another environment (such as Node.js).\n\n```js\nvar isBrowserWindow = require(\"can-util/js/is-browser-window/is-browser-window\");\nvar GLOBAL = require(\"can-util/js/global/global\");\n\nif(isBrowserWindow()) {\n  console.log(GLOBAL() === window); // -> true\n}\n```\n","params":[],"returns":{"types":[{"type":"Boolean"}],"description":"True if the environment is a Browser window.\n"}}],"_curReturn":{"types":[{"type":"Boolean"}],"description":"True if the environment is a Browser window.\n"}},"can-util/js/is-empty-object":{"type":"function","name":"can-util/js/is-empty-object","parent":"js/is-empty-object/is-empty-object.js","src":{"line":2,"codeLine":20,"path":"js/is-empty-object/is-empty-object.js"},"body":"","description":"Determines if an object is an object with no properties. ","title":"isEmptyObject","signatures":[{"code":"isEmptyObject(obj)","description":"\n\nUsed to determine if an object is an empty object (an object with no properties) such as `{}`.\n\n```js\nvar isEmptyObject = require(\"can-util/js/is-empty-object/is-empty-object\");\n\nconsole.log(isEmptyObject({})); // -> true\n\nconsole.log(isEmptyObject({ a: 1 })); // -> false\n```\n","params":[{"types":[{"type":"Object","options":[]}],"name":"obj","description":"Any object."}],"returns":{"types":[{"type":"Boolean"}],"description":"True if the object is an object with no properties.\n"}}],"_curParam":{"types":[{"type":"Object","options":[]}],"name":"obj","description":"Any object."},"_curReturn":{"types":[{"type":"Boolean"}],"description":"True if the object is an object with no properties.\n"}},"can-util/js/is-function":{"type":"function","name":"can-util/js/is-function","parent":"js/is-function/is-function.js","src":{"line":0,"codeLine":16,"path":"js/is-function/is-function.js"},"body":"","description":"Determines if an object is a Function. ","title":"isFunction","signatures":[{"code":"isFunction(value)","description":"\n\n```js\nvar isFunction = require(\"can-util/js/is-function/is-function\");\n\nconsole.log(isFunction(function(){})); // -> true\n\nconsole.log(isFunction({})); // -> false\n```\n","params":[],"returns":{"types":[{"type":"Boolean"}],"description":"True if the provided argument is a function.\n"}}],"_curReturn":{"types":[{"type":"Boolean"}],"description":"True if the provided argument is a function.\n"}},"can-util/js/is-node":{"type":"function","name":"can-util/js/is-node","parent":"js/is-node/is-node.js","src":{"line":0,"codeLine":17,"path":"js/is-node/is-node.js"},"body":"","description":"Determines if your code is running in [Node.js](https://nodejs.org). ","title":"isNode","signatures":[{"code":"isNode()","description":"\n\n```js\nvar isNode = require(\"can-util/js/is-node/is-node\");\nvar GLOBAL = require(\"can-util/js/global/global\");\n\nif(isNode()) {\n  console.log(GLOBAL() === global); // -> true\n}\n```\n","params":[],"returns":{"types":[{"type":"Boolean"}],"description":"True if running in Node.js\n"}}],"_curReturn":{"types":[{"type":"Boolean"}],"description":"True if running in Node.js\n"}},"can-util/js/is-plain-object":{"src":{"path":"js/is-plain-object/is-plain-object.md"},"body":"","description":"Determines if an object is a plain object. ","title":"isPlainObject","name":"can-util/js/is-plain-object","type":"function","signatures":[{"code":"isPlainObject(obj)","description":"\n\nAttempts to determine if an object is a plain object like those you would create using the curly braces syntax: `{}`. The following are not plain objects:\n\n1. Objects with prototypes (created using the `new` keyword).\n2. Booleans.\n3. Numbers.\n4. NaN.\n\n```js\nvar isPlainObject = require(\"can-util/js/is-plain-object/is-plain-object\");\n\n// Created with {}\nconsole.log(isPlainObject({})); // -> true\n\n// new Object\nconsole.log(isPlainObject(new Object())); // -> true\n\n// Custom object\nvar Ctr = function(){};\nvar obj = new Ctr();\n\nconsole.log(isPlainObject(obj)); // -> false\n```\n","params":[{"types":[{"type":"Object","options":[]}],"name":"obj","description":""}],"returns":{"types":[{"type":"Boolean"}],"description":"\n"}}],"_curParam":{"types":[{"type":"Object","options":[]}],"name":"obj","description":""},"_curReturn":{"types":[{"type":"Boolean"}],"description":"\n"}},"can-util/js/is-promise":{"type":"function","name":"can-util/js/is-promise","parent":"js/is-promise/is-promise.js","src":{"line":0,"codeLine":19,"path":"js/is-promise/is-promise.js"},"body":"","description":"Determines if an object is a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). ","title":"isPromise","signatures":[{"code":"isPromise(obj)","description":"\n\n```js\nvar isPromise = require(\"can-util/js/is-promise/is-promise\");\n\nvar promise = new Promise(function(resolve){\n  resolve();\n});\n\nconsole.log(isPromise(promise)); // -> true\nconsole.log(isPromise(\"foo bar\")); // -> false\n```\n","params":[{"types":[{"type":"Object","options":[]}],"name":"obj","description":"An object to be tested."}],"returns":{"types":[{"type":"Boolean"}],"description":"True if the object is a Promise.\n"}}],"_curParam":{"types":[{"type":"Object","options":[]}],"name":"obj","description":"An object to be tested."},"_curReturn":{"types":[{"type":"Boolean"}],"description":"True if the object is a Promise.\n"}},"can-util/js/is-string":{"type":"function","name":"can-util/js/is-string","parent":"js/is-string/is-string.js","src":{"line":0,"codeLine":17,"path":"js/is-string/is-string.js"},"body":"","description":"Determines if the provided argument is a string. ","title":"isString","signatures":[{"code":"isString(obj)","description":"\n\n```js\nvar isString = require(\"can-util/js/is-string/is-string\");\n\nconsole.log(isString(\"foo\")); // -> true\nconsole.log(isString(String(\"foo\")); // -> true\n\nconsole.log(isString({})); // -> false\n```\n","params":[{"types":[{"type":"*"}],"name":"obj","description":"An object to test if is a string."}],"returns":{"types":[{"type":"Boolean"}],"description":"True if the object is a string.\n"}}],"_curParam":{"types":[{"type":"*"}],"name":"obj","description":"An object to test if is a string."},"_curReturn":{"types":[{"type":"Boolean"}],"description":"True if the object is a string.\n"}},"can-util/js/is-web-worker":{"body":"","description":"Determines if the code is running with a [Web Worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers). ","title":"isWebWorker","name":"can-util/js/is-web-worker","type":"function","signatures":[{"code":"isWebWorker()","description":"\n\n```js\nvar isWebWorker = require(\"can-util/js/is-web-worker/is-web-worker\");\nvar GLOBAL = require(\"can-util/js/global/global\");\n\nif(isWebWorker()) {\n  console.log(GLOBAL() === self); // -> true\n}\n```\n","params":[],"returns":{"types":[{"type":"Boolean"}],"description":"True if running in a Web Worker.\n"}}],"_curReturn":{"types":[{"type":"Boolean"}],"description":"True if running in a Web Worker.\n"}},"can-util/js/join-uris":{"src":{"path":"js/join-uris/join-uris.md"},"body":"","description":"Join together a URI path to a base. ","title":"joinURIs","name":"can-util/js/join-uris","type":"function","signatures":[{"code":"joinURIs(base, href)","description":"\n\nProvides a convenient way to join together URIs handling relative paths.\n\n```js\nvar joinURIs = require(\"can-util/js/join-uris\");\n\nvar base = \"http://example.com/some/long/path\";\nvar href = \"../../images/foo.png\";\n\nvar res = joinURIs(base, href);\n\nconsole.log(res); // -> http://example.com/images/foo.png\n```\n","params":[{"types":[{"type":"String"}],"name":"base","description":""},{"types":[{"type":"String"}],"name":"href","description":""}],"returns":{"types":[{"type":"String"}],"description":"The result of joining the two parts.\n"}}],"_curParam":{"types":[{"type":"String"}],"name":"href","description":""},"_curReturn":{"types":[{"type":"String"}],"description":"The result of joining the two parts.\n"}}}