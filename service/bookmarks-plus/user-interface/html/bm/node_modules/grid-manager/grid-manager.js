'use strict';

//START OF moduleFunction() ============================================================

export default function(gridElement, qtools) {


	//LOCAL VARIABLES ====================================

	const bookmarksArray = qtools.convertNumericObjectToArray(gridElement.bookmarks);
	let workingTable;


	//LOCAL FUNCTIONS ====================================
	
	const getDimension = (direction) => {
		return bookmarksArray.reduce((prevMax, item, inx, all) => {
			if (typeof (prevMax) == 'object') {
				item = prevMax;
				prevMax = 0;
			}
			return Math.max(prevMax, item.position[direction]);
		})
	};

	const startTable = (id, tableClassString) => {
		return $(`<table id='table_${id}' class='${tableClassString}'></table>`);
	}

	const addRows = (tableObj, count, columns, msg) => {
		let newRow;
		const origCount = tableObj.find('tr').length;
		for (let i = origCount; i < count + origCount; i++) {
			newRow = $(`<tr><td>row ${i}</td></tr>`);
			const row = tableObj.append(newRow);
			for (let j = 0; j < columns; j++) {
				newRow.append($(`<td></td>`));
			}
		}
	}

	const cellByCoord = (rowNumber, col) => {
		window.workingTable = workingTable;
		const row = workingTable.find(`tr:nth-of-type(${rowNumber})`);
		const cell = row.find(`td:nth-of-type(${col})`);
		return cell;
	}
	
	const updateCell=(bookmark)=>{
console.dir({"gridElement.refId":gridElement.refId});

		cell.html(`<a href='${bookmark.anchor.uri}'>${bookmark.anchor.text}</a>`);

	};


	//METHODS AND PROPERTIES ====================================

	this.renderGrid = (tableClassString) => {


		workingTable = startTable(gridElement.refId, tableClassString);
		addRows(workingTable, getDimension('row'), gridElement.columnWidth);

		bookmarksArray.map((item, inx)=>{
	
			updateCell(item);
		});

		return workingTable;
	}

	//INITIALIZATION ====================================

	return this;
}
;

//END OF moduleFunction() ============================================================


