'use strict';

//START OF moduleFunction() ============================================================

export default function(gridElement, tools) {

	const {Map, stache, qtools}=tools;

	//LOCAL VARIABLES ====================================

	const bookmarksArray = qtools.convertNumericObjectToArray(gridElement.bookmarks);
	let workingTable;


	//LOCAL FUNCTIONS ====================================

	const getDimension = (direction) => {
		return bookmarksArray.reduce((prevMax, item, inx, all) => {

			return Math.max(prevMax, item.position[direction]);
		}, 0)
	};

	const startTable = (id, tableClassString) => {
		return $(`<table id='table_${id}' class='${tableClassString}'></table>`);
	}

	const addRows = (tableObj, count, columns, msg) => {
		let newRow;
		const origCount = tableObj.find('tr').length;
		for (let i = origCount; i < count + origCount; i++) {
			newRow = $(`<tr><td>&nbsp;</td></tr>`);
			const row = tableObj.append(newRow);
			for (let j = 0; j < columns; j++) {
				newRow.append($(`<td></td>`));
			}
		}
	}

	const cellByCoord = (rowNumber, col) => {
		window.workingTable = workingTable;
		const row = workingTable.find(`tr:nth-of-type(${rowNumber})`);
		const cell = row.find(`td:nth-of-type(${col})`);
		return cell;
	}


	const updateCell = (bookmark, editMode) => {
		const cell = cellByCoord(bookmark.position.row, bookmark.position.column);


		if (editMode) {
		
			const htmlOrig = `
				<input type='text' name='uri' value='{{anchor.uri}}'>
				<input type='text' name='text' value='{{anchor.text}}'>
			`;

			const html = `
				<input type='text' name='uri' {($value)}='anchor.uri'>
				<input type='text' name='text' {($value)}='anchor.text'>
			`;
			const renderer = stache(htmlOrig);
			const testMap = new Map(bookmark);
			const fragment = renderer(testMap);
			cell.html(fragment);
		} else {
			cell.html(`<a href='${bookmark.anchor.uri}'>${bookmark.anchor.text}</a>`);
		}

	};


	//METHODS AND PROPERTIES ====================================

	this.renderGrid = (tableClassString, editMode) => {
		workingTable = startTable(gridElement.refId, tableClassString);
		addRows(workingTable, getDimension('row'), gridElement.columnWidth);
		bookmarksArray.map((item, inx) => {
			updateCell(item, editMode);
		});
		return workingTable;
	}

	//INITIALIZATION ====================================

	return this;
}
;

//END OF moduleFunction() ============================================================


